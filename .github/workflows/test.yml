name: Employee API Test

on:
  push:
    branches: [ master ]
    tags:
      - '*'
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests

    env:
      MONGO_URI: ${{secrets.MONGO_URI}}
      JWT_EXPIRES_IN: ${{secrets.JWT_EXPIRES_IN}}
      JWT_SECRET: ${{secrets.JWT_SECRET}}
      QUEUE_URL: ${{secrets.QUEUE_URL}}
      SMTP_URL: ${{secrets.SMTP_URL}}
      COVERALLS_REPO_TOKEN: ${{secrets.COVERALLS_REPO_TOKEN}}

    steps:
      - uses: actions/checkout@v2

      - name: Start MongoDB
        uses: supercharge/mongodb-github-action@1.3.0
        with:
          mongodb-version: '4.4.1'

      - name: Start Redis
        uses: supercharge/redis-github-action@1.1.0
        with:
          redis-version: '5.0.7'

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}

      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'

      - name: Install Dependencies
        run: yarn install

      - name: Run Unit tests
        run: yarn test:cov

      - name: Run E2E tests
        run: yarn test:e2e --coverage

      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: production-build-artifact
          path: |
            dist
            package.json
            Dockerfile
            docker-compose.yml
            .dockerignore
            
      - name: Archive code coverage results
        uses: actions/upload-artifact@v2
        with:
          name: code-coverage-report-artifact
          path: |
            coverage
            test/coverage

  upload_coverage_report:
    name: Upload Coverage Report
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Download code coverage artifact
        uses: actions/download-artifact@v2
        with:
          name: code-coverage-report-artifact

      - name: Upload coverage to Codecov for Unit tests
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: coverage/lcov.info
          flag-name: unit-tests

      - name: Upload coverage to Codecov for E2E tests
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: test/coverage/lcov.info
          flag-name: e2e-tests

  push_to_registry:
    name: Push Docker image to Docker Hub
    needs: test
    if: github.event_name != 'pull_request' && startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Download production build artifact
        uses: actions/download-artifact@v2
        with:
          name: production-build-artifact

      - name: Docker meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: ghcr.io/adesege/employee-api/backend
          tag-sha: true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1 
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}

      - name: Push to Github Packages
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
